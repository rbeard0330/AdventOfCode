// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

var input = Fs.readFileSync("src/data/d2.txt", {
      encoding: "utf-8"
    });

function splitLines(s) {
  return s.split("\n");
}

function splitTabs(s) {
  return s.split("\t");
}

function $$parseInt(s) {
  return Number(s) | 0;
}

function parseLine(line) {
  return Belt_Array.map(line.split("\t"), (function (s) {
                return Number(s) | 0;
              }));
}

function firstOrZero(arr) {
  var n = Belt_Array.get(arr, 0);
  if (n !== undefined) {
    return n;
  } else {
    return 0;
  }
}

function arrayMax(arr) {
  return Belt_Array.reduce(arr, firstOrZero(arr), (function (prim, prim$1) {
                if (prim > prim$1) {
                  return prim;
                } else {
                  return prim$1;
                }
              }));
}

function arrayMin(arr) {
  return Belt_Array.reduce(arr, firstOrZero(arr), (function (prim, prim$1) {
                if (prim < prim$1) {
                  return prim;
                } else {
                  return prim$1;
                }
              }));
}

function checkSum(line) {
  var maxValue = arrayMax(line);
  var minValue = arrayMin(line);
  return maxValue - minValue | 0;
}

function firstAnswer(input) {
  return Belt_Array.reduce(Belt_Array.map(Belt_Array.map(Belt_Array.map(input.split("\n"), (function (prim) {
                            return prim.trim();
                          })), (function (s) {
                        return Belt_Array.map(s.split("\t"), $$parseInt);
                      })), checkSum), 0, (function (a, b) {
                return a + b | 0;
              }));
}

if (firstAnswer("5\t1\t9\t5\n7\t5\t3\n2\t4\t6\t8") !== 18) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "d2.res",
          38,
          0
        ],
        Error: new Error()
      };
}

var answer1 = firstAnswer(input);

console.log(answer1);

function first(arr, testFn) {
  return Belt_Array.reduce(arr, undefined, (function (acc, next) {
                if (acc !== undefined) {
                  return Caml_option.some(Caml_option.valFromOption(acc));
                } else if (Curry._1(testFn, next)) {
                  return Caml_option.some(next);
                } else {
                  return ;
                }
              }));
}

function divides(x, y) {
  if (x !== 0) {
    return Caml_int32.mod_(y, x) === 0;
  } else {
    return false;
  }
}

function numberDividedByX(x, restLine) {
  return first(restLine, (function (y) {
                if (divides(x, y)) {
                  return x !== y;
                } else {
                  return false;
                }
              }));
}

if (numberDividedByX(2, []) !== undefined) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "d2.res",
          49,
          0
        ],
        Error: new Error()
      };
}

if (numberDividedByX(2, [
        1,
        3,
        5
      ]) !== undefined) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "d2.res",
          50,
          0
        ],
        Error: new Error()
      };
}

if (!Caml_obj.caml_equal(numberDividedByX(2, [
            3,
            4,
            5
          ]), 4)) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "d2.res",
          51,
          0
        ],
        Error: new Error()
      };
}

function numbersDivided(arr) {
  return Belt_Array.map(arr, (function (num) {
                return numberDividedByX(num, arr);
              }));
}

if (!Caml_obj.caml_equal(numbersDivided([
            3,
            4,
            5
          ]), [
        undefined,
        undefined,
        undefined
      ])) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "d2.res",
          56,
          0
        ],
        Error: new Error()
      };
}

if (!Caml_obj.caml_equal(numbersDivided([
            2,
            4,
            5
          ]), [
        4,
        undefined,
        undefined
      ])) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "d2.res",
          57,
          0
        ],
        Error: new Error()
      };
}

function dividingPair(arr) {
  return Belt_Array.map(Belt_Array.zip(arr, numbersDivided(arr)).filter(function (param) {
                  return Js_option.isSome(param[1]);
                }), (function (param) {
                return [
                        param[0],
                        Js_option.getExn(param[1])
                      ];
              }));
}

if (!Caml_obj.caml_equal(dividingPair([
            2,
            4,
            5
          ]), [[
          2,
          4
        ]])) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "d2.res",
          64,
          0
        ],
        Error: new Error()
      };
}

function divResult(a, b) {
  if (a > b) {
    return Caml_int32.div(a, b);
  } else {
    return Caml_int32.div(b, a);
  }
}

function checksum2(arr) {
  return firstOrZero(Belt_Array.map(dividingPair(arr), (function (param) {
                    return divResult(param[0], param[1]);
                  })));
}

if (checksum2([
        2,
        4,
        5
      ]) !== 2) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "d2.res",
          72,
          0
        ],
        Error: new Error()
      };
}

if (checksum2([
        2,
        8,
        5
      ]) !== 4) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "d2.res",
          73,
          0
        ],
        Error: new Error()
      };
}

var testInput = "5\t9\t2\t8\n9\t4\t7\t3\n3\t8\t6\t5";

function secondAnswer(input) {
  return Belt_Array.reduce(Belt_Array.map(Belt_Array.map(Belt_Array.map(input.split("\n"), (function (prim) {
                            return prim.trim();
                          })), (function (s) {
                        return Belt_Array.map(s.split("\t"), $$parseInt);
                      })), checksum2), 0, (function (a, b) {
                return a + b | 0;
              }));
}

if (secondAnswer(testInput) !== 9) {
  throw {
        RE_EXN_ID: "Assert_failure",
        _1: [
          "d2.res",
          85,
          0
        ],
        Error: new Error()
      };
}

console.log(secondAnswer(input));

exports.input = input;
exports.splitLines = splitLines;
exports.splitTabs = splitTabs;
exports.$$parseInt = $$parseInt;
exports.parseLine = parseLine;
exports.firstOrZero = firstOrZero;
exports.arrayMax = arrayMax;
exports.arrayMin = arrayMin;
exports.checkSum = checkSum;
exports.firstAnswer = firstAnswer;
exports.answer1 = answer1;
exports.first = first;
exports.divides = divides;
exports.numberDividedByX = numberDividedByX;
exports.numbersDivided = numbersDivided;
exports.dividingPair = dividingPair;
exports.divResult = divResult;
exports.checksum2 = checksum2;
exports.testInput = testInput;
exports.secondAnswer = secondAnswer;
/* input Not a pure module */
